@page "/"
@rendermode InteractiveServer

@inject AppDbContext DbContext
@inject ToDoList.Services.ToDoService TodoService;
@inject AuthenticationStateProvider AuthStateProvider

@using ToDoList.Models
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize]

<PageTitle>Todo!</PageTitle>

@if(isUserAuthenticated)
{
    //list of users todo items
    <ToDoList.Components.Shared.ToDoTable @ref="todoTableRef" userId="userId" EditTodo="EditTodo"/>

    //modal for creating and editing todos
    <ToDoList.Components.Shared.Modal IsVisible="isEditModalVisible" Todo="selectedTodo" OnSave="SaveTodo" OnClose="HandleModalVisibilityChanged"/>
}
else
{
    <p>Please <NavLink href="/signin">sign in</NavLink> or <NavLink href="/create-account">create an account</NavLink> to continue.</p>
} 

@code{
    int userId;
    private bool isUserAuthenticated = false;
    private bool isEditModalVisible = false;
    private TodoItem? selectedTodo;

    private ToDoList.Components.Shared.ToDoTable todoTableRef;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User;

        if(user.Identity != null && user.Identity.IsAuthenticated)
        {
            isUserAuthenticated = true;
            var username = user.Identity.Name;

            var userDb = await DbContext.Users.FirstOrDefaultAsync(u => u.Username == username);
            if(userDb != null)
            {
                userId = userDb.Id;
            }
        }
    }

    private void EditTodo(TodoItem? todo = null)
    {
        if(todo != null)
        {
            selectedTodo = todo;
        }
        else
        {
            selectedTodo = new();
            selectedTodo.DueDate = DateOnly.FromDateTime(DateTime.Now);
            selectedTodo.CreationDate = DateOnly.FromDateTime(DateTime.Now);
        }
        isEditModalVisible = true;
    }

    private async Task SaveTodo(TodoItem todo)
    {
        if(todo.Id == 0)
        {
            todo.UserId = userId;
        }

        await TodoService.UpdateTodoAsync(todo);
        isEditModalVisible = false;
        await todoTableRef.GetTodos();
    }

    private async Task UpdateTodo(TodoItem todo)
    {
        await TodoService.UpdateTodoAsync(todo);
    }

    private void HandleModalVisibilityChanged(bool isVisible)
    {
        isEditModalVisible = isVisible;
        if(!isVisible)
        {
            selectedTodo = null;
        }
    }
}
