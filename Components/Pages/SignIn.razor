@page "/signin"

@inject AppDbContext DbContext
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication
@using ToDoList.Services;
@using Microsoft.EntityFrameworkCore
@using System.Linq;
@using System.ComponentModel.DataAnnotations;

<PageTitle>Sign In</PageTitle>

<div class="containter">
    <div class="row justify-content-center">
        <div class="col-2 border rounded bg-light p-3">
            <p>@message</p>
            <EditForm Model="@Model" OnValidSubmit="OnPostAsync" FormName="LoginForm">
                <DataAnnotationsValidator />
                <div class="form-group mb-3">
                    <label for="input-username">Username</label>
                    <InputText class="form-control" id="input-username" @bind-Value="Model.Username" placeholder="Username" />
                </div>
                <div class="form-group mb-3">
                    <label for="input-password">Password</label>
                    <InputText class="form-control" id="input-password" @bind-Value="Model.Password" placeholder="Password" type="password" />
                </div>
                <button class="btn btn-primary mb-3" type="submit">Sign In</button>
            </EditForm>
            <NavLink href="/create-account">Or Create an Account</NavLink>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-2">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Username</th>
                        <th scope="col">Password</th>
                        <th scope="col">Role</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var user in DbContext.Users)
                    {
                        <tr>
                            <td>@user.Username</td>
                            <td>@user.Password</td>
                            <td>@user.Role</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
    </div>
    
</div>
@code{
    [SupplyParameterFromForm]
    private User Model {get; set;} = new User{
        Username = "",
        Role = ""
    };
    private string message = "Sign in to continue";

    [CascadingParameter]
    public HttpContext? HttpContext {get; set;}

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if(authState.User.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
        }
    }

    private async Task OnPostAsync()
    {
        var user = await DbContext.Users.FirstOrDefaultAsync(u => u.Username == Model.Username);

        if(user == null)
        {
            message = "Could not find user";
        }
        else if (user.Password != Model.Password)
        {
            message = "password was incorrect";
        }
        else
        {
            message = "Sign in successful";
            @* UserState.SignIn(user.Username);
            message = "Sign in successful";
            NavManager.NavigateTo("/"); *@

            Model.Role = user.Role;
            Model.Id = user.Id;

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, Model.Username ?? string.Empty),
                new Claim(ClaimTypes.Role, Model.Role ?? "user"),
                new Claim(ClaimTypes.NameIdentifier, Model.Id.ToString())
            };
            message = "created claim";
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            message = "about to sign in";
            if(HttpContext != null)
            {
                await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
            }
            message = "signed in";
            NavManager.NavigateTo("/");
        }
    }
}
