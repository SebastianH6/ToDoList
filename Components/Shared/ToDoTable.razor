@inject AppDbContext DbContext;
@inject ToDoList.Services.ToDoService TodoService;

<div class="container-fluid border rounded p-3 bg-light" style="min-height: 600px;">
    <button class="btn btn-primary" @onclick="() => EditTodo.InvokeAsync()">Create</button>
    
        @if(DbContext.ToDoItems.Any(t => t.UserId == userId))
        {
            <div class="row">
                @foreach (var todo in DbContext.ToDoItems.Where(t => t.UserId == userId))
                {
                    <div class="col-md-6 col-lg-3 g-3">
                        <div class="card" style="min-height: 300px;">
                            <h5 class="card-header">
                                <svg class="bd-placeholder-img rounded me-2 @GetFillPriority(todo.Priority)" width="20" height="20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" preserveAspectRatio="xMidYMid slice" focusable="false"><rect width="100%" height="100%" fill="currentColor"></rect></svg>
                                @todo.Title
                            </h5>
                            <div class="card-body d-flex flex-column">
                                <div class="progress mb-2" role="progressbar" aria-label="Example 1px high" aria-valuenow="@GetProgressBar(todo.DueDate, todo.CreationDate)" aria-valuemin="0" aria-valuemax="100" style="height: 4px">
                                    <div class="progress-bar @GetProgressColor(GetProgressBar(todo.DueDate, todo.CreationDate))" style="width: @GetProgressBar(todo.DueDate, todo.CreationDate)%"></div>
                                </div>
                                <p class="card-text">@todo.Description</p>
                            </div>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">Creation Date: @todo.CreationDate.ToString()</li>
                                <li class="list-group-item">Due Date: @todo.DueDate.ToString()</li>
                                <li class="list-group-item">Priority: @todo.Priority</li>
                            </ul>

                            <div class="card-footer">
                                <button class="btn btn-primary" @onclick="() => EditTodo.InvokeAsync(todo)">Edit</button>
                                <button class="btn btn-secondary" @onclick="() => TodoService.DeleteTodoAsync(todo)">Delete</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-secondary text-center">Create a new item to get started</p>
        }
</div>

@code{
    [Parameter] public int userId {get; set;}
    [Parameter] public EventCallback<TodoItem> EditTodo {get; set;}

    private List<TodoItem> todos;

    public TodoItem? selectedTodo;
    public bool isEditModalVisible = false;

    private int TimeToDue(DateOnly dueDate)
    {
        var dateNow = DateOnly.FromDateTime(DateTime.Now);
        return (dueDate.DayNumber - dateNow.DayNumber);
    }

    private int GetProgressBar(DateOnly dueDate, DateOnly creationDate)
    {
        var totalDays = (dueDate.ToDateTime(TimeOnly.MinValue) - creationDate.ToDateTime(TimeOnly.MinValue)).TotalDays;
        var daysPassed = (DateTime.Now - creationDate.ToDateTime(TimeOnly.MinValue)).TotalDays;
        return (int)((daysPassed / totalDays) * 100);
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetTodos();
    }

    private async Task GetTodos()
    {
        todos = await TodoService.GetTodosAsync(userId);
    }

    public async Task Refresh()
    {
        await GetTodos();
        await InvokeAsync(StateHasChanged);
    }

    private string GetBorderPriority(string priority)
    {
        return priority switch
        {
            "Low" => "border-info",
            "Medium" => "border-warning",
            "High" => "border-danger",
            "Urgent" => "border-danger",
            _ => ""
        };
    }

    private string GetFillPriority(string priority)
    {
        return priority switch
        {
            "Low" => "text-info",
            "Medium" => "text-warning",
            "High" => "text-danger",
            "Urgent" => "text-danger",
            _ => ""
        };
    }

    private string GetProgressColor(int percentIn)
    {
        if(percentIn < 75)
        {
            return "";
        }
        else if(percentIn >= 80)
        {
            return "bg-danger";
        }
        else
        {
            return "bg-warning";
        }
    }
}
