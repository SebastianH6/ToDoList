@inject AppDbContext DbContext;
@inject ToDoList.Services.ToDoService TodoService;

<div class="container border rounded p-3">
    <div class="row">
        @foreach (var todo in DbContext.ToDoItems.Where(t => t.UserId == userId))
        {
            <div class="col-sm-3">
                <div class="card">
                    <h5 class="card-header">@todo.Title</h5>
                    <div class="card-body">
                        <p class="card-text">@todo.Description</p>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="defaultCheck2">
                            <label class="form-check-label" for="defaultCheck2">
                                Incomplete
                            </label>
                        </div>
                    </div> 
                    <div class="card-footer">
                        <button class="btn btn-primary" @onclick="() => EditTodo.InvokeAsync(todo)">Edit</button>
                        <button class="btn btn-secondary" @onclick="() => TodoService.DeleteTodoAsync(todo)">Delete</button>
                    </div>
                </div>
            </div>
        } 
    </div>
</div>

@code{
    [Parameter] public int userId {get; set;}
    [Parameter] public EventCallback<TodoItem> EditTodo {get; set;}

    private List<TodoItem> todos;

    public TodoItem? selectedTodo;
    public bool isEditModalVisible = false;

    protected override async Task OnParametersSetAsync()
    {
        await GetTodos();
    }

    private async Task GetTodos()
    {
        todos = await TodoService.GetTodosAsync(userId);
    }

    public async Task Refresh()
    {
        await GetTodos();
        await InvokeAsync(StateHasChanged);
    }
}
