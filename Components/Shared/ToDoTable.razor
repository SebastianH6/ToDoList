@inject AppDbContext DbContext;
@inject ToDoList.Services.ToDoService TodoService;

<div class="container-fluid border rounded p-3 bg-light" style="min-height: 600px;">
    <div class="row">
        <div class="col">
            <button class="btn btn-primary" @onclick="() => EditTodo.InvokeAsync()">Create</button>
        </div>
        <div class="col d-flex justify-content-end align-items-center">
            <label class="mx-2" for="todoFilter">Sort By:</label>
            <select name="filter" id="todoFilter" @onchange="OnSortChange">
                <option value="creationTime">Creation Time</option>
                <option value="dueDate">Due Date</option>
                <option value="priority">Priority</option>
            </select>
            <form class="form-inline my-2 my-lg-0 d-flex">
                <input class="form-control mx-sm-3" type="search" placeholder="Search" aria-label="Search" @bind="searchQuery" @oninput="OnSearch">
                <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
            </form>
        </div>
    </div>
    
        @if(DbContext.ToDoItems.Any(t => t.UserId == userId))
        {
            <div class="row">
                @if(todos.Any())
                {
                    @foreach (var todo in todos)
                    {
                        <div class="col-md-6 col-lg-3 g-3">
                            <div class="card @GetBorderPriority(todo.DueDate)" style="min-height: 300px;">
                                <h5 class="card-header">
                                    <svg class="bd-placeholder-img rounded me-2 @GetFillPriority(todo.Priority)" width="20" height="20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" preserveAspectRatio="xMidYMid slice" focusable="false"><rect width="100%" height="100%" fill="currentColor"></rect></svg>
                                    @((MarkupString)HighlightText(todo.Title, searchQuery))
                                </h5>
                                <div class="card-body d-flex flex-column">
                                    <div class="progress mb-2" role="progressbar" aria-label="Example 1px high" aria-valuenow="@GetProgressBar(todo.DueDate, todo.CreationDate)" aria-valuemin="0" aria-valuemax="100" style="height: 4px">
                                        <div class="progress-bar @GetProgressColor(GetProgressBar(todo.DueDate, todo.CreationDate))" style="width: @GetProgressBar(todo.DueDate, todo.CreationDate)%"></div>
                                    </div>
                                    <p class="card-text">@((MarkupString)HighlightText(todo.Description, searchQuery))</p>
                                </div>
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item">Creation Date: @todo.CreationDate.ToString()</li>
                                    <li class="list-group-item">Due Date: @todo.DueDate.ToString()</li>
                                    <li class="list-group-item">Priority: @GetPriorityString(todo.Priority)</li>
                                </ul>

                                <div class="card-footer">
                                    <button class="btn btn-primary" @onclick="() => EditTodoAsync(todo)">Edit</button>
                                    <button class="btn btn-secondary" @onclick="() => DeleteTodoAsync(todo)">Delete</button>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-secondary text-center">No results for search...</p>
                }
            </div>
        }
        else
        {
            <p class="text-secondary text-center">Create a new item to get started</p>
        }
</div>

@code{
    [Parameter] public int userId {get; set;}
    [Parameter] public EventCallback<TodoItem> EditTodo {get; set;}

    private List<TodoItem> todos;

    public TodoItem? selectedTodo;
    public bool isEditModalVisible = false;
    private string searchQuery = string.Empty;

    private int TimeToDue(DateOnly dueDate)
    {
        var dateNow = DateOnly.FromDateTime(DateTime.Now);
        return (dueDate.DayNumber - dateNow.DayNumber);
    }

    private int GetProgressBar(DateOnly dueDate, DateOnly creationDate)
    {
        var totalDays = (dueDate.ToDateTime(TimeOnly.MinValue) - creationDate.ToDateTime(TimeOnly.MinValue)).TotalDays;
        var daysPassed = (DateTime.Now - creationDate.ToDateTime(TimeOnly.MinValue)).TotalDays;
        return (int)((daysPassed / totalDays) * 100);
    }

    protected async override void OnInitialized()
    {
        await GetTodos();
    }

    public async Task GetTodos(string sortOption = "creationTime")
    {
        todos = await TodoService.GetTodosAsync(userId, sortOption, searchQuery.ToLower());
        await Refresh();
    }

    private async Task EditTodoAsync(TodoItem todo)
    {
        await EditTodo.InvokeAsync(todo);
        await GetTodos();
    }

    private async Task DeleteTodoAsync(TodoItem todo)
    {
        await TodoService.DeleteTodoAsync(todo);
        await GetTodos();
    }

    public async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    private string GetBorderPriority(DateOnly dueDate)
    {
        if(dueDate < DateOnly.FromDateTime(DateTime.Now))
        {
            return "border-danger";
        }
        return string.Empty;
    }

    private string GetFillPriority(int priority)
    {
        return priority switch
        {
            0 => "text-info",
            1 => "text-warning",
            2 => "text-danger",
            3 => "text-danger",
            _ => ""
        };
    }

    private string GetPriorityString(int priority)
    {
        return priority switch
        {
            0 => "Low",
            1 => "Medium",
            2 => "High",
            3 => "Urgent",
            _ => ""
        };
    }

    private string GetProgressColor(int percentIn)
    {
        if(percentIn < 75)
        {
            return "";
        }
        else if(percentIn >= 80)
        {
            return "bg-danger";
        }
        else
        {
            return "bg-warning";
        }
    }

    public async void OnSortChange(ChangeEventArgs e)
    {
        var sortOption = e.Value.ToString();
        await GetTodos(sortOption);
    }

    public async Task OnSearch(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        await GetTodos();
    }

    private string HighlightText(string text, string searchQuery)
    {
        if(string.IsNullOrEmpty(searchQuery))
        {
            return text;
        }

        var highlightedText = text.Replace(searchQuery, $"<span class='bg-warning'>{searchQuery}</span>", StringComparison.OrdinalIgnoreCase);
        return highlightedText;
    }
}
